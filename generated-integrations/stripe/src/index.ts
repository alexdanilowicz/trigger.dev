import { getTriggerRun } from "@trigger.dev/sdk";
import type { TriggerEvent } from "@trigger.dev/sdk";
import { z } from "zod";
import { CheckoutSessionCompletedOutput, Prettify } from "./types";

const checkoutSessionCompletedEventSchema = z.object({ "after_expiration": z.union([z.any(), z.null()]).describe("When set, provides configuration for actions to take if this Checkout Session expires.").optional(), "allow_promotion_codes": z.union([z.boolean().describe("Enables user redeemable promotion codes."), z.null().describe("Enables user redeemable promotion codes.")]).describe("Enables user redeemable promotion codes.").optional(), "amount_subtotal": z.union([z.number().int().describe("Total of all items before discounts or taxes are applied."), z.null().describe("Total of all items before discounts or taxes are applied.")]).describe("Total of all items before discounts or taxes are applied.").optional(), "amount_total": z.union([z.number().int().describe("Total of all items after discounts and taxes are applied."), z.null().describe("Total of all items after discounts and taxes are applied.")]).describe("Total of all items after discounts and taxes are applied.").optional(), "automatic_tax": z.any(), "billing_address_collection": z.union([z.literal("auto"), z.literal("required"), z.literal(null)]).describe("Describes whether Checkout should collect the customer's billing address.").optional(), "cancel_url": z.union([z.string().max(5000).describe("If set, Checkout displays a back button and customers will be directed to this URL if they decide to cancel payment and return to your website."), z.null().describe("If set, Checkout displays a back button and customers will be directed to this URL if they decide to cancel payment and return to your website.")]).describe("If set, Checkout displays a back button and customers will be directed to this URL if they decide to cancel payment and return to your website.").optional(), "client_reference_id": z.union([z.string().max(5000).describe("A unique string to reference the Checkout Session. This can be a\ncustomer ID, a cart ID, or similar, and can be used to reconcile the\nSession with your internal systems."), z.null().describe("A unique string to reference the Checkout Session. This can be a\ncustomer ID, a cart ID, or similar, and can be used to reconcile the\nSession with your internal systems.")]).describe("A unique string to reference the Checkout Session. This can be a\ncustomer ID, a cart ID, or similar, and can be used to reconcile the\nSession with your internal systems.").optional(), "consent": z.union([z.any(), z.null()]).describe("Results of `consent_collection` for this session.").optional(), "consent_collection": z.union([z.any(), z.null()]).describe("When set, provides configuration for the Checkout Session to gather active consent from customers.").optional(), "created": z.number().int().describe("Time at which the object was created. Measured in seconds since the Unix epoch."), "currency": z.union([z.string().describe("Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."), z.null().describe("Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).")]).describe("Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).").optional(), "custom_fields": z.array(z.any()).describe("Collect additional information from your customer using custom fields. Up to 2 fields are supported."), "custom_text": z.any(), "customer": z.union([z.string().max(5000), z.any(), z.any(), z.null()]).describe("The ID of the customer for this Session.\nFor Checkout Sessions in `payment` or `subscription` mode, Checkout\nwill create a new customer object based on information provided\nduring the payment flow unless an existing customer was provided when\nthe Session was created.").optional(), "customer_creation": z.union([z.literal("always"), z.literal("if_required"), z.literal(null)]).describe("Configure whether a Checkout Session creates a Customer when the Checkout Session completes.").optional(), "customer_details": z.union([z.any(), z.null()]).describe("The customer details including the customer's tax exempt status and the customer's tax IDs. Only the customer's email is present on Sessions in `setup` mode.").optional(), "customer_email": z.union([z.string().max(5000).describe("If provided, this value will be used when the Customer object is created.\nIf not provided, customers will be asked to enter their email address.\nUse this parameter to prefill customer data if you already have an email\non file. To access information about the customer once the payment flow is\ncomplete, use the `customer` attribute."), z.null().describe("If provided, this value will be used when the Customer object is created.\nIf not provided, customers will be asked to enter their email address.\nUse this parameter to prefill customer data if you already have an email\non file. To access information about the customer once the payment flow is\ncomplete, use the `customer` attribute.")]).describe("If provided, this value will be used when the Customer object is created.\nIf not provided, customers will be asked to enter their email address.\nUse this parameter to prefill customer data if you already have an email\non file. To access information about the customer once the payment flow is\ncomplete, use the `customer` attribute.").optional(), "expires_at": z.number().int().describe("The timestamp at which the Checkout Session will expire."), "id": z.string().max(5000).describe("Unique identifier for the object."), "invoice": z.union([z.string().max(5000), z.any(), z.null()]).describe("ID of the invoice created by the Checkout Session, if it exists.").optional(), "invoice_creation": z.union([z.any(), z.null()]).describe("Details on the state of invoice creation for the Checkout Session.").optional(), "line_items": z.object({ "data": z.array(z.any()).describe("Details about each object."), "has_more": z.boolean().describe("True if this list has another page of items after this one that can be fetched."), "object": z.enum(["list"]).describe("String representing the object's type. Objects of the same type share the same value. Always has the value `list`."), "url": z.string().max(5000).describe("The URL where this list can be accessed.") }).describe("The line items purchased by the customer.").optional(), "livemode": z.boolean().describe("Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."), "locale": z.union([z.literal("auto"), z.literal("bg"), z.literal("cs"), z.literal("da"), z.literal("de"), z.literal("el"), z.literal("en"), z.literal("en-GB"), z.literal("es"), z.literal("es-419"), z.literal("et"), z.literal("fi"), z.literal("fil"), z.literal("fr"), z.literal("fr-CA"), z.literal("hr"), z.literal("hu"), z.literal("id"), z.literal("it"), z.literal("ja"), z.literal("ko"), z.literal("lt"), z.literal("lv"), z.literal("ms"), z.literal("mt"), z.literal("nb"), z.literal("nl"), z.literal("pl"), z.literal("pt"), z.literal("pt-BR"), z.literal("ro"), z.literal("ru"), z.literal("sk"), z.literal("sl"), z.literal("sv"), z.literal("th"), z.literal("tr"), z.literal("vi"), z.literal("zh"), z.literal("zh-HK"), z.literal("zh-TW"), z.literal(null)]).describe("The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used.").optional(), "metadata": z.union([z.record(z.string().max(500)).describe("Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."), z.null().describe("Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.")]).describe("Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.").optional(), "mode": z.enum(["payment", "setup", "subscription"]).describe("The mode of the Checkout Session."), "object": z.enum(["checkout.session"]).describe("String representing the object's type. Objects of the same type share the same value."), "payment_intent": z.union([z.string().max(5000), z.any(), z.null()]).describe("The ID of the PaymentIntent for Checkout Sessions in `payment` mode.").optional(), "payment_link": z.union([z.string().max(5000), z.any(), z.null()]).describe("The ID of the Payment Link that created this Session.").optional(), "payment_method_collection": z.union([z.literal("always"), z.literal("if_required"), z.literal(null)]).describe("Configure whether a Checkout Session should collect a payment method.").optional(), "payment_method_options": z.union([z.any(), z.null()]).describe("Payment-method-specific configuration for the PaymentIntent or SetupIntent of this CheckoutSession.").optional(), "payment_method_types": z.array(z.string().max(5000)).describe("A list of the types of payment methods (e.g. card) this Checkout\nSession is allowed to accept."), "payment_status": z.enum(["no_payment_required", "paid", "unpaid"]).describe("The payment status of the Checkout Session, one of `paid`, `unpaid`, or `no_payment_required`.\nYou can use this value to decide when to fulfill your customer's order."), "phone_number_collection": z.any().optional(), "recovered_from": z.union([z.string().max(5000).describe("The ID of the original expired Checkout Session that triggered the recovery flow."), z.null().describe("The ID of the original expired Checkout Session that triggered the recovery flow.")]).describe("The ID of the original expired Checkout Session that triggered the recovery flow.").optional(), "setup_intent": z.union([z.string().max(5000), z.any(), z.null()]).describe("The ID of the SetupIntent for Checkout Sessions in `setup` mode.").optional(), "shipping_address_collection": z.union([z.any(), z.null()]).describe("When set, provides configuration for Checkout to collect a shipping address from a customer.").optional(), "shipping_cost": z.union([z.any(), z.null()]).describe("The details of the customer cost of shipping, including the customer chosen ShippingRate.").optional(), "shipping_details": z.union([z.any(), z.null()]).describe("Shipping information for this Checkout Session.").optional(), "shipping_options": z.array(z.any()).describe("The shipping rate options applied to this Session."), "status": z.union([z.literal("complete"), z.literal("expired"), z.literal("open"), z.literal(null)]).describe("The status of the Checkout Session, one of `open`, `complete`, or `expired`.").optional(), "submit_type": z.union([z.literal("auto"), z.literal("book"), z.literal("donate"), z.literal("pay"), z.literal(null)]).describe("Describes the type of transaction being performed by Checkout in order to customize\nrelevant text on the page, such as the submit button. `submit_type` can only be\nspecified on Checkout Sessions in `payment` mode, but not Checkout Sessions\nin `subscription` or `setup` mode.").optional(), "subscription": z.union([z.string().max(5000), z.any(), z.null()]).describe("The ID of the subscription for Checkout Sessions in `subscription` mode.").optional(), "success_url": z.string().max(5000).describe("The URL the customer will be directed to after the payment or\nsubscription creation is successful."), "tax_id_collection": z.any().optional(), "total_details": z.union([z.any(), z.null()]).describe("Tax and discount details for the computed total amount.").optional(), "url": z.union([z.string().max(5000).describe("The URL to the Checkout Session. Redirect customers to this URL to take them to Checkout. If you’re using [Custom Domains](https://stripe.com/docs/payments/checkout/custom-domains), the URL will use your subdomain. Otherwise, it’ll use `checkout.stripe.com.`\nThis value is only present when the session is active."), z.null().describe("The URL to the Checkout Session. Redirect customers to this URL to take them to Checkout. If you’re using [Custom Domains](https://stripe.com/docs/payments/checkout/custom-domains), the URL will use your subdomain. Otherwise, it’ll use `checkout.stripe.com.`\nThis value is only present when the session is active.")]).describe("The URL to the Checkout Session. Redirect customers to this URL to take them to Checkout. If you’re using [Custom Domains](https://stripe.com/docs/payments/checkout/custom-domains), the URL will use your subdomain. Otherwise, it’ll use `checkout.stripe.com.`\nThis value is only present when the session is active.").optional() }).describe("A Checkout Session represents your customer's session as they pay for\none-time purchases or subscriptions through [Checkout](https://stripe.com/docs/payments/checkout)\nor [Payment Links](https://stripe.com/docs/payments/payment-links). We recommend creating a\nnew Session each time your customer attempts to pay.\n\nOnce payment is successful, the Checkout Session will contain a reference\nto the [Customer](https://stripe.com/docs/api/customers), and either the successful\n[PaymentIntent](https://stripe.com/docs/api/payment_intents) or an active\n[Subscription](https://stripe.com/docs/api/subscriptions).\n\nYou can create a Checkout Session on your server and redirect to its URL\nto begin Checkout.\n\nRelated guide: [Checkout Quickstart](https://stripe.com/docs/checkout/quickstart).")

/** A form response was submitted */
function checkoutSessionCompletedEvent(

): TriggerEvent<typeof checkoutSessionCompletedEventSchema> {
  return {
    metadata: {
      type: "INTEGRATION_WEBHOOK",
      service: "stripe",
      name: "checkout.session.completed",
      key: `checkout.session.completed`,
      filter: {
        service: ["stripe"],
        event: ["checkout.session.completed"],
      },
      source: undefined,
    },
    schema: checkoutSessionCompletedEventSchema,
  };
}

export const events = { checkoutSessionCompletedEvent };
